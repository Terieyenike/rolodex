{"version":3,"sources":["styles.module.css","images/oval.svg","actions/robotsActions.js","components/SearchBox/SearchBox.jsx","components/Card/Card.jsx","components/CardList/CardList.jsx","App.jsx","reducers/robotsReducer.js","reducers/index.js","serviceWorker.js","index.js"],"names":["module","exports","GET_MONSTERS","GET_MONSTERS_SUCCESS","GET_MONSTERS_FAILURE","getMonsters","type","getMonstersSuccess","monsters","payload","getMonstersFailure","SearchBox","handleChange","className","style","input__container","aria-label","onChange","input","placeholder","Card","monster","card_box","src","id","alt","card_details","name","email","company","catchPhrase","CardList","card__section","container","card","map","key","connect","state","loading","searchField","text","dispatch","useEffect","a","async","fetch","response","json","data","filterMonsters","filter","toLowerCase","includes","Fragment","header","e","target","value","img","oval","initialStateSearch","initialState","hasErrors","rootReducer","combineReducers","action","actions","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ee2ccf20.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__3q8Zo\",\"input\":\"styles_input__JUXtg\",\"input__container\":\"styles_input__container__2Li-R\",\"container\":\"styles_container__d38tt\",\"card\":\"styles_card__1-dAI\",\"card_box\":\"styles_card_box__2rsuO\",\"card_details\":\"styles_card_details__1XxZn\",\"img\":\"styles_img__1Q06j\",\"section_footer\":\"styles_section_footer__35TwY\"};","module.exports = __webpack_public_path__ + \"static/media/oval.86cd5610.svg\";","export const GET_MONSTERS = 'GET MONSTERS';\nexport const GET_MONSTERS_SUCCESS = 'GET_MONSTERS_SUCCESS';\nexport const GET_MONSTERS_FAILURE = 'GET_MONSTERS_FAILURE';\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const getMonsters = () => ({\n  type: GET_MONSTERS,\n});\n\nexport const getMonstersSuccess = (monsters) => ({\n  type: GET_MONSTERS_SUCCESS,\n  payload: monsters,\n});\n\nexport const getMonstersFailure = () => ({\n  type: GET_MONSTERS_FAILURE,\n});\n\nexport function fetchMonsters() {\n  return async (dispatch) => {\n    dispatch(getMonsters());\n    try {\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/users'\n      );\n      const data = await response.json();\n      dispatch(getMonstersSuccess(data));\n    } catch (error) {\n      dispatch(getMonstersFailure());\n    }\n  };\n}\n","import React from 'react';\nimport style from '../../styles.module.css';\n\nexport const SearchBox = ({ handleChange }) => (\n  <div className={style.input__container}>\n    <input\n      aria-label='Search, Filter Robots'\n      onChange={handleChange}\n      className={style.input}\n      placeholder={'Search Monsters'}\n    />\n  </div>\n);\n","import React from 'react';\nimport style from '../../styles.module.css';\n\nexport const Card = ({ monster }) => (\n  <div className={style.card_box}>\n    <img\n      src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\n      alt='monster'\n    />\n    <div className={style.card_details}>\n      <h2>{monster.name}</h2>\n      <p>{monster.email}</p>\n      <p>{monster.company.catchPhrase}</p>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { Card } from '../../components/Card/Card';\nimport style from '../../styles.module.css';\n\nexport const CardList = ({ monsters }) => (\n  <section className={style.card__section}>\n    <div className={style.container}>\n      <div className={style.card}>\n        {monsters.map((monster) => (\n          <Card key={monster.id} monster={monster} />\n        ))}\n      </div>\n    </div>\n  </section>\n);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\n// bring in the asynchronous fetchMonsters action\nimport { fetchMonsters, setSearchField } from './actions/robotsActions';\nimport { SearchBox } from './components/SearchBox/SearchBox';\nimport { CardList } from './components/CardList/CardList';\n// import { Footer } from './components/Footer/Footer';\nimport oval from './images/oval.svg';\n\nimport style from './styles.module.css';\n\nconst App = ({ dispatch, loading, monsters, searchField }) => {\n  useEffect(() => {\n    dispatch(fetchMonsters());\n  }, [dispatch]);\n\n  const searchMonsters = (e) => {\n    dispatch(setSearchField(e.target.value));\n\n  };\n\n  const filterMonsters = monsters.filter((monster) => {\n    return monster.name.toLowerCase().includes(searchField.toLowerCase())\n  });\n\n  return (\n    <React.Fragment>\n      <div className={style.header}>\n        <h1>Monster Rolodex</h1>\n        <SearchBox\n          handleChange={searchMonsters}\n        />\n      </div>\n      {loading ? (\n        <div className={style.img}>\n          <img src={oval} alt='' />\n        </div>\n      )  : (\n        <CardList monsters={filterMonsters} />\n      )}\n      {/* <Footer /> */}\n    </React.Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  loading: state.monsters.loading,\n  monsters: state.monsters.monsters,\n  // hasErrors: state.monsters,\n  searchField: state.text.searchField,\n});\n\nexport default connect(mapStateToProps)(App);\n","import * as actions from '../actions/robotsActions';\n\nexport const initialStateSearch = {\n  searchField: '',\n};\n\nexport const searchRobots = (state = initialStateSearch, action) => {\n  switch (action.type) {\n    case actions.CHANGE_SEARCH_FIELD:\n      return {\n        ...state,\n        searchField: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const initialState = {\n  monsters: [],\n  loading: false,\n  hasErrors: false,\n};\n\nexport default function robotsReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.GET_MONSTERS:\n      return { ...state, loading: true };\n    case actions.GET_MONSTERS_SUCCESS:\n      return { monsters: action.payload, loading: false };\n    case actions.GET_MONSTERS_FAILURE:\n      return { ...state, loading: false, hasErrors: true };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport robotsReducer from './robotsReducer';\nimport { searchRobots } from './robotsReducer';\n\nconst rootReducer = combineReducers({\n  monsters: robotsReducer,\n  text: searchRobots,\n});\n\nexport default rootReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport App from './App.jsx';\nimport rootReducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}