{"version":3,"sources":["styles.module.css","images/oval.svg","components/SearchBox/SearchBox.jsx","components/Card/Card.jsx","components/CardList/CardList.jsx","components/Footer/Footer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","SearchBox","value","handleChange","className","style","input__container","aria-label","onChange","input","placeholder","Card","monster","card_box","src","id","alt","card_details","name","email","company","catchPhrase","CardList","monsters","card__section","container","card","map","key","Footer","section_footer","App","useState","setMonsters","searchField","setSearchField","loading","setLoading","useEffect","fetchMonsters","a","async","fetch","response","json","data","filteredMonsters","filter","toLowerCase","includes","Fragment","header","e","target","img","oval","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4fe3ea44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"styles_header__3q8Zo\",\"input\":\"styles_input__JUXtg\",\"input__container\":\"styles_input__container__2Li-R\",\"container\":\"styles_container__d38tt\",\"card\":\"styles_card__1-dAI\",\"card_box\":\"styles_card_box__2rsuO\",\"card_details\":\"styles_card_details__1XxZn\",\"img\":\"styles_img__1Q06j\",\"section_footer\":\"styles_section_footer__35TwY\"};","module.exports = __webpack_public_path__ + \"static/media/oval.86cd5610.svg\";","import React from 'react';\nimport style from '../../styles.module.css';\n\nexport const SearchBox = ({ value, handleChange }) => (\n  <div className={style.input__container}>\n    <input\n      aria-label='Search, Filter Robots'\n      value={value}\n      onChange={handleChange}\n      className={style.input}\n      placeholder={'Search Monsters'}\n    />\n  </div>\n);\n","import React from 'react';\nimport style from '../../styles.module.css';\n\nexport const Card = ({ monster }) => (\n  <div className={style.card_box}>\n    <img\n      src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\n      alt='monster'\n    />\n    <div className={style.card_details}>\n      <h2>{monster.name}</h2>\n      <p>{monster.email}</p>\n      <p>{monster.company.catchPhrase}</p>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { Card } from '../../components/Card/Card';\nimport style from '../../styles.module.css';\n\nexport const CardList = ({ monsters }) => (\n  <section className={style.card__section}>\n    <div className={style.container}>\n      <div className={style.card}>\n        {monsters.map((monster) => (\n          <Card key={monster.id} monster={monster} />\n        ))}\n      </div>\n    </div>\n  </section>\n);\n","import React from 'react';\nimport style from '../../styles.module.css';\n\nexport const Footer = () => (\n  <section className={style.section_footer}>\n    <div className={style.container}>\n      <footer>Teri Â© 2020. all rights reserved</footer>\n    </div>\n  </section>\n);\n","import React, { useState, useEffect } from 'react';\nimport { SearchBox } from './components/SearchBox/SearchBox';\nimport { CardList } from './components/CardList/CardList';\nimport { Footer } from './components/Footer/Footer';\nimport oval from './images/oval.svg';\n\nimport style from './styles.module.css';\n\nconst App = () => {\n  const [monsters, setMonsters] = useState([]);\n  const [searchField, setSearchField] = useState('');\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchMonsters();\n  }, []);\n\n  const fetchMonsters = async () => {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    const data = await response.json();\n    setMonsters(data);\n    setLoading(false);\n  };\n\n  const searchMonsters = (e) => {\n    setSearchField(e.target.value);\n  };\n\n  const filteredMonsters = monsters.filter((monster) =>\n    monster.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n  return (\n    <React.Fragment>\n      <div className={style.header}>\n        <h1>Monster Rolodex</h1>\n        <SearchBox value={searchField} handleChange={searchMonsters} />\n      </div>\n      {loading ? (\n        <div className={style.img}>\n          <img src={oval} alt='' />\n        </div>\n      ) : (\n        <CardList monsters={filteredMonsters} />\n      )}\n      <Footer />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}